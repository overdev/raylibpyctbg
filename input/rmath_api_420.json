{
    "defines": [],
    "structs": [],
    "aliases": [],
    "enums": [],
    "callbacks": [],
    "functions": [
        {
            "name": "Clamp",
            "description": "Clamp float value",
            "returnType": "float",
            "params": [
                {
                    "type": "float",
                    "name": "value"
                },
                {
                    "type": "float",
                    "name": "min_"
                },
                {
                    "type": "float",
                    "name": "max_"
                }
            ]
        },
        {
            "name": "Lerp",
            "description": "Calculate linear interpolation between two floats",
            "returnType": "float",
            "params": [
                {
                    "type": "float",
                    "name": "start"
                },
                {
                    "type": "float",
                    "name": "end"
                },
                {
                    "type": "float",
                    "name": "amount"
                }
            ]
        },
        {
            "name": "Normalize",
            "description": "Calculate linear interpolation between two floats",
            "returnType": "float",
            "params": [
                {
                    "type": "float",
                    "name": "value"
                },
                {
                    "type": "float",
                    "name": "start"
                },
                {
                    "type": "float",
                    "name": "end"
                }
            ]
        },
        {
            "name": "Remap",
            "description": "Remap input value within input range to output range",
            "returnType": "float",
            "params": [
                {
                    "type": "float",
                    "name": "value"
                },
                {
                    "type": "float",
                    "name": "inputStart"
                },
                {
                    "type": "float",
                    "name": "inputEnd"
                },
                {
                    "type": "float",
                    "name": "outputStart"
                },
                {
                    "type": "float",
                    "name": "outputEnd"
                }
            ]
        },
        {
            "name": "Wrap",
            "description": "Wrap input value from min to max",
            "returnType": "float",
            "params": [
                {
                    "type": "float",
                    "name": "value"
                },
                {
                    "type": "float",
                    "name": "min_"
                },
                {
                    "type": "float",
                    "name": "max_"
                }
            ]
        },
        {
            "name": "FloatEquals",
            "description": "Check whether two given floats are almost equal",
            "returnType": "int",
            "params": [
                {
                    "type": "float",
                    "name": "x"
                },
                {
                    "type": "float",
                    "name": "y"
                }
            ]
        },
        {
            "name": "Vector2Zero",
            "description": "Vector with components value 0.0f",
            "returnType": "Vector2",
            "params": []
        },
        {
            "name": "Vector2One",
            "description": "Vector with components value 1.0f",
            "returnType": "Vector2",
            "params": []
        },
        {
            "name": "Vector2Add",
            "description": "Add two vectors (v1 + v2)",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "Vector2",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector2AddValue",
            "description": "Add vector and float value",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v"
                },
                {
                    "type": "float",
                    "name": "add"
                }
            ]
        },
        {
            "name": "Vector2Subtract",
            "description": "Subtract two vectors (v1 - v2)",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "Vector2",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector2SubtractValue",
            "description": "Subtract vector by float value",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v"
                },
                {
                    "type": "float",
                    "name": "sub"
                }
            ]
        },
        {
            "name": "Vector2Length",
            "description": "Calculate vector length",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v"
                }
            ]
        },
        {
            "name": "Vector2LengthSqr",
            "description": "Calculate vector square length",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v"
                }
            ]
        },
        {
            "name": "Vector2DotProduct",
            "description": "Calculate two vectors dot product",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "Vector2",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector2Distance",
            "description": "Calculate distance between two vectors",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "Vector2",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector2DistanceSqr",
            "description": "Calculate square distance between two vectors",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "Vector2",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector2Angle",
            "description": "Calculate angle from two vectors",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "Vector2",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector2Scale",
            "description": "Scale vector (multiply by value)",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v"
                },
                {
                    "type": "float",
                    "name": "scale"
                }
            ]
        },
        {
            "name": "Vector2Multiply",
            "description": "Multiply vector by vector",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "Vector2",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector2Negate",
            "description": "Negate vector",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v"
                }
            ]
        },
        {
            "name": "Vector2Divide",
            "description": "Divide vector by vector",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "Vector2",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector2Normalize",
            "description": "Normalize provided vector",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v"
                }
            ]
        },
        {
            "name": "Vector2Transform",
            "description": "Transforms a Vector2 by a given Matrix",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v"
                },
                {
                    "type": "Matrix",
                    "name": "mat"
                }
            ]
        },
        {
            "name": "Vector2Lerp",
            "description": "Calculate linear interpolation between two vectors",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "Vector2",
                    "name": "v2"
                },
                {
                    "type": "float",
                    "name": "amount"
                }
            ]
        },
        {
            "name": "Vector2Reflect",
            "description": "Calculate reflected vector to normal",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "Vector2",
                    "name": "normal"
                }
            ]
        },
        {
            "name": "Vector2Rotate",
            "description": "Rotate vector by angle",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "float",
                    "name": "angle"
                }
            ]
        },
        {
            "name": "Vector2MoveTowards",
            "description": "Move Vector towards target",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v1"
                },
                {
                    "type": "Vector2",
                    "name": "target"
                },
                {
                    "type": "float",
                    "name": "maxDistance"
                }
            ]
        },
        {
            "name": "Vector2Invert",
            "description": "Invert the given vector",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v"
                }
            ]
        },
        {
            "name": "Vector2Clamp",
            "description": "Clamp the components of the vector between min and max values specified by the given vectors",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v"
                },
                {
                    "type": "Vector2",
                    "name": "min_"
                },
                {
                    "type": "Vector2",
                    "name": "max_"
                }
            ]
        },
        {
            "name": "Vector2ClampValue",
            "description": "Clamp the magnitude of the vector between two min and max values",
            "returnType": "Vector2",
            "params": [
                {
                    "type": "Vector2",
                    "name": "v"
                },
                {
                    "type": "float",
                    "name": "min_"
                },
                {
                    "type": "float",
                    "name": "max_"
                }
            ]
        },
        {
            "name": "Vector2Equals",
            "description": "Check whether two given vectors are almost equal",
            "returnType": "int",
            "params": [
                {
                    "type": "Vector2",
                    "name": "p"
                },
                {
                    "type": "Vector2",
                    "name": "q"
                }
            ]
        },
        {
            "name": "Vector3Zero",
            "description": "Vector with components value 0.0f",
            "returnType": "Vector3",
            "params": []
        },
        {
            "name": "Vector3One",
            "description": "Vector with components value 1.0f",
            "returnType": "Vector3",
            "params": []
        },
        {
            "name": "Vector3Add",
            "description": "Add two vectors",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3AddValue",
            "description": "Add vector and float value",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                },
                {
                    "type": "float",
                    "name": "add"
                }
            ]
        },
        {
            "name": "Vector3Subtract",
            "description": "Subtract two vectors",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3SubtractValue",
            "description": "Subtract vector and float value",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                },
                {
                    "type": "float",
                    "name": "sub"
                }
            ]
        },
        {
            "name": "Vector3Scale",
            "description": "Multiply vector by scalar",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                },
                {
                    "type": "float",
                    "name": "scalar"
                }
            ]
        },
        {
            "name": "Vector3Multiply",
            "description": "Multiply vector by vector",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3CrossProduct",
            "description": "Calculate two vectors cross product",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3Perpendicular",
            "description": "Calculate one vector perpendicular vector",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                }
            ]
        },
        {
            "name": "Vector3Length",
            "description": "Calculate vector length",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                }
            ]
        },
        {
            "name": "Vector3LengthSqr",
            "description": "Calculate vector square length",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                }
            ]
        },
        {
            "name": "Vector3DotProduct",
            "description": "Calculate two vectors dot product",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3Distance",
            "description": "Calculate distance between two vectors",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3DistanceSqr",
            "description": "Calculate square distance between two vectors",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3Angle",
            "description": "Calculate angle between two vectors",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3Negate",
            "description": "Negate provided vector (invert direction)",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                }
            ]
        },
        {
            "name": "Vector3Divide",
            "description": "Divide vector by vector",
            "returnType": "float",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3Normalize",
            "description": "Normalize provided vector",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                }
            ]
        },
        {
            "name": "Vector3OrthoNormalize",
            "description": "Makes vectors normalized and orthogonal to each other",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3 *",
                    "name": "v1"
                },
                {
                    "type": "Vector3 *",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3Transform",
            "description": "Transforms a Vector3 by a given Matrix",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                },
                {
                    "type": "Matrix",
                    "name": "mat"
                }
            ]
        },
        {
            "name": "Vector3RotateByQuaternion",
            "description": "Transform a vector by quaternion rotation",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                },
                {
                    "type": "Quaternion",
                    "name": "q"
                }
            ]
        },
        {
            "name": "Vector3RotateByAxisAngle",
            "description": "Rotates a vector around an axis",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                },
                {
                    "type": "Vector3",
                    "name": "axis"
                },
                {
                    "type": "float",
                    "name": "angle"
                }
            ]
        },
        {
            "name": "Vector3Lerp",
            "description": "Calculate linear interpolation between two vectors",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                },
                {
                    "type": "float",
                    "name": "amount"
                }
            ]
        },
        {
            "name": "Vector3Reflect",
            "description": "Calculate reflected vector to normal",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                },
                {
                    "type": "Vector3",
                    "name": "normal"
                }
            ]
        },
        {
            "name": "Vector3Min",
            "description": "Get min value for each pair of components",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3Max",
            "description": "Get max value for each pair of components",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v1"
                },
                {
                    "type": "Vector3",
                    "name": "v2"
                }
            ]
        },
        {
            "name": "Vector3Barycenter",
            "description": "Compute barycenter coordinates (u, v, w) for point p with respect to triangle (a, b, c). Assumes P is on the plane of the triangle",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "p"
                },
                {
                    "type": "Vector3",
                    "name": "a"
                },
                {
                    "type": "Vector3",
                    "name": "b"
                },
                {
                    "type": "Vector3",
                    "name": "c"
                }
            ]
        },
        {
            "name": "Vector3Unproject",
            "description": "Projects a Vector3 from screen space into object space",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "source"
                },
                {
                    "type": "Matrix",
                    "name": "projection"
                },
                {
                    "type": "Matrix",
                    "name": "view"
                }
            ]
        },
        {
            "name": "Vector3ToFloatV",
            "description": "Get Vector3 as float array",
            "returnType": "float[3]",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                }
            ]
        },
        {
            "name": "Vector3Invert",
            "description": "Invert the given vector",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                }
            ]
        },
        {
            "name": "Vector3Clamp",
            "description": "Clamp the components of the vector between min and max values specified by the given vectors",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                },
                {
                    "type": "Vector3",
                    "name": "min_"
                },
                {
                    "type": "Vector3",
                    "name": "max_"
                }
            ]
        },
        {
            "name": "Vector3ClampValue",
            "description": "Clamp the magnitude of the vector between two values",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                },
                {
                    "type": "float",
                    "name": "min_"
                },
                {
                    "type": "float",
                    "name": "max_"
                }
            ]
        },
        {
            "name": "Vector3Equals",
            "description": "Check whether two given vectors are almost equal",
            "returnType": "int",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                },
                {
                    "type": "float",
                    "name": "min_"
                },
                {
                    "type": "float",
                    "name": "max_"
                }
            ]
        },
        {
            "name": "Vector3Refract",
            "description": "Compute the direction of a refracted ray where v specifies the normalized direction of the incoming ray, n specifies the normalized normal vector of the interface of two optical media, and r specifies the ratio of the refractive index of the medium from where the ray comes to the refractive index of the medium on the other side of the surface",
            "returnType": "int",
            "params": [
                {
                    "type": "Vector3",
                    "name": "v"
                },
                {
                    "type": "Vector3",
                    "name": "n"
                },
                {
                    "type": "float",
                    "name": "r"
                }
            ]
        },
        {
            "name": "MatrixDeterminant",
            "description": "Compute matrix determinant",
            "returnType": "float",
            "params": [
                {
                    "type": "Matrix",
                    "name": "mat"
                }
            ]
        },
        {
            "name": "MatrixTrace",
            "description": "Get the trace of the matrix (sum of the values along the diagonal)",
            "returnType": "float",
            "params": [
                {
                    "type": "Matrix",
                    "name": "mat"
                }
            ]
        },
        {
            "name": "MatrixTranspose",
            "description": "Get the trace of the matrix (sum of the values along the diagonal)",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "Matrix",
                    "name": "mat"
                }
            ]
        },
        {
            "name": "MatrixInvert",
            "description": "Invert provided matrix",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "Matrix",
                    "name": "mat"
                }
            ]
        },
        {
            "name": "MatrixIdentity",
            "description": "Get identity matrix",
            "returnType": "Matrix",
            "params": []
        },
        {
            "name": "MatrixAdd",
            "description": "Add two matrices",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "Matrix",
                    "name": "left"
                },
                {
                    "type": "Matrix",
                    "name": "right"
                }
            ]
        },
        {
            "name": "MatrixSubtract",
            "description": "Subtract two matrices (left - right)",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "Matrix",
                    "name": "left"
                },
                {
                    "type": "Matrix",
                    "name": "right"
                }
            ]
        },
        {
            "name": "MatrixMultiply",
            "description": "Get two matrix multiplication. When multiplying matrices... the order matters!",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "Matrix",
                    "name": "left"
                },
                {
                    "type": "Matrix",
                    "name": "right"
                }
            ]
        },
        {
            "name": "MatrixTranslate",
            "description": "Get translation matrix",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "float",
                    "name": "x"
                },
                {
                    "type": "float",
                    "name": "y"
                },
                {
                    "type": "float",
                    "name": "z"
                }
            ]
        },
        {
            "name": "MatrixRotate",
            "description": "Create rotation matrix from axis and angle. Angle should be provided in radians",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "Vector3",
                    "name": "axis"
                },
                {
                    "type": "float",
                    "name": "angle"
                }
            ]
        },
        {
            "name": "MatrixRotateX",
            "description": "Get x-rotation matrix. Angle must be provided in radians",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "float",
                    "name": "angle"
                }
            ]
        },
        {
            "name": "MatrixRotateY",
            "description": "Get y-rotation matrix. Angle must be provided in radians",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "float",
                    "name": "angle"
                }
            ]
        },
        {
            "name": "MatrixRotateZ",
            "description": "Get z-rotation matrix. Angle must be provided in radians",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "float",
                    "name": "angle"
                }
            ]
        },
        {
            "name": "MatrixRotateXYZ",
            "description": "Get xyz-rotation matrix. Angle must be provided in radians",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "Vector3",
                    "name": "angle"
                }
            ]
        },
        {
            "name": "MatrixRotateZYX",
            "description": "Get zyx-rotation matrix. Angle must be provided in radians",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "Vector3",
                    "name": "angle"
                }
            ]
        },
        {
            "name": "MatrixScale",
            "description": "Get scaling matrix",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "float",
                    "name": "x"
                },
                {
                    "type": "float",
                    "name": "y"
                },
                {
                    "type": "float",
                    "name": "z"
                }
            ]
        },
        {
            "name": "MatrixFrustum",
            "description": "Get perspective projection matrix",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "float",
                    "name": "left"
                },
                {
                    "type": "float",
                    "name": "right"
                },
                {
                    "type": "float",
                    "name": "bottom"
                },
                {
                    "type": "float",
                    "name": "top"
                },
                {
                    "type": "float",
                    "name": "near"
                },
                {
                    "type": "float",
                    "name": "far"
                }
            ]
        },
        {
            "name": "MatrixPerspective",
            "description": "Get perspective projection matrix. Fovy angle must be provided in radians",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "float",
                    "name": "fovy"
                },
                {
                    "type": "float",
                    "name": "aspect"
                },
                {
                    "type": "float",
                    "name": "near"
                },
                {
                    "type": "float",
                    "name": "far"
                }
            ]
        },
        {
            "name": "MatrixOrtho",
            "description": "Get orthographic projection matrix",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "float",
                    "name": "left"
                },
                {
                    "type": "float",
                    "name": "right"
                },
                {
                    "type": "float",
                    "name": "bottom"
                },
                {
                    "type": "float",
                    "name": "top"
                },
                {
                    "type": "float",
                    "name": "near"
                },
                {
                    "type": "float",
                    "name": "far"
                }
            ]
        },
        {
            "name": "MatrixLookAt",
            "description": "Get camera look-at matrix (view matrix)",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "Vector3",
                    "name": "eye"
                },
                {
                    "type": "Vector3",
                    "name": "target"
                },
                {
                    "type": "Vector3",
                    "name": "up"
                }
            ]
        },
        {
            "name": "MatrixToFloatV",
            "description": "Get float array of matrix data",
            "returnType": "float[16]",
            "params": [
                {
                    "type": "Matrix",
                    "name": "mat"
                }
            ]
        },
        {
            "name": "QuaternionAdd",
            "description": "Add two quaternions",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q1"
                },
                {
                    "type": "Quaternion",
                    "name": "q2"
                }
            ]
        },
        {
            "name": "QuaternionAddValue",
            "description": "Add quaternion and float value",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q"
                },
                {
                    "type": "float",
                    "name": "add"
                }
            ]
        },
        {
            "name": "QuaternionSubtract",
            "description": "Subtract two quaternions",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q1"
                },
                {
                    "type": "Quaternion",
                    "name": "q2"
                }
            ]
        },
        {
            "name": "QuaternionSubtractValue",
            "description": "Subtract quaternion and float value",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q"
                },
                {
                    "type": "float",
                    "name": "sub"
                }
            ]
        },
        {
            "name": "QuaternionIdentity",
            "description": "Get identity quaternion",
            "returnType": "Quaternion",
            "params": []
        },
        {
            "name": "QuaternionLength",
            "description": "Computes the length of a quaternion",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q"
                }
            ]
        },
        {
            "name": "QuaternionNormalize",
            "description": "Normalize provided quaternion",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q"
                }
            ]
        },
        {
            "name": "QuaternionInvert",
            "description": "Invert provided quaternion",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q"
                }
            ]
        },
        {
            "name": "QuaternionMultiply",
            "description": "Calculate two quaternion multiplication",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q1"
                },
                {
                    "type": "Quaternion",
                    "name": "q2"
                }
            ]
        },
        {
            "name": "QuaternionScale",
            "description": "Scale quaternion by float value",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q1"
                },
                {
                    "type": "float",
                    "name": "mul"
                }
            ]
        },
        {
            "name": "QuaternionDivide",
            "description": "Divide two quaternions",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q1"
                },
                {
                    "type": "Quaternion",
                    "name": "q2"
                }
            ]
        },
        {
            "name": "QuaternionNlerp",
            "description": "Calculate slerp-optimized interpolation between two quaternions",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q1"
                },
                {
                    "type": "Quaternion",
                    "name": "q2"
                },
                {
                    "type": "float",
                    "name": "amount"
                }
            ]
        },
        {
            "name": "QuaternionSlerp",
            "description": "Calculates spherical linear interpolation between two quaternions",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q1"
                },
                {
                    "type": "Quaternion",
                    "name": "q2"
                },
                {
                    "type": "float",
                    "name": "amount"
                }
            ]
        },
        {
            "name": "QuaternionFromVector3ToVector3",
            "description": "Calculate quaternion based on the rotation from one vector to another",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Vector3",
                    "name": "from_"
                },
                {
                    "type": "Vector3",
                    "name": "to"
                }
            ]
        },
        {
            "name": "QuaternionToMatrix",
            "description": "Get a quaternion for a given rotation matrix",
            "returnType": "Matrix",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q"
                }
            ]
        },
        {
            "name": "QuaternionFromMatrix",
            "description": "Get a quaternion for a given rotation matrix",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Matrix",
                    "name": "mat"
                }
            ]
        },
        {
            "name": "QuaternionFromAxisAngle",
            "description": "Get rotation quaternion for an angle and axis. Angle must be provided in radians",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Vector3",
                    "name": "mat"
                },
                {
                    "type": "float",
                    "name": "angle"
                }
            ]
        },
        {
            "name": "QuaternionToAxisAngle",
            "description": "Get the rotation angle and axis for a given quaternion",
            "returnType": "void",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q"
                },
                {
                    "type": "Vector3 *",
                    "name": "outAxis"
                },
                {
                    "type": "float *",
                    "name": "outAngle"
                }
            ]
        },
        {
            "name": "QuaternionFromEuler",
            "description": "Get the quaternion equivalent to Euler angles. Rotation order is ZYX",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "float",
                    "name": "pitch"
                },
                {
                    "type": "float",
                    "name": "yaw"
                },
                {
                    "type": "float",
                    "name": "roll"
                }
            ]
        },
        {
            "name": "QuaternionToEuler",
            "description": "Get the quaternion equivalent to Euler angles. Rotation order is ZYX",
            "returnType": "Vector3",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q"
                }
            ]
        },
        {
            "name": "QuaternionTransform",
            "description": "Transform a quaternion given a transformation matrix",
            "returnType": "Quaternion",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "q"
                },
                {
                    "type": "Matrix",
                    "name": "mat"
                }
            ]
        },
        {
            "name": "QuaternionEquals",
            "description": "Check whether two given quaternions are almost equal",
            "returnType": "int",
            "params": [
                {
                    "type": "Quaternion",
                    "name": "p"
                },
                {
                    "type": "Quaternion",
                    "name": "q"
                }
            ]
        }
    ]
}